# EditorConfig is awesome: https://EditorConfig.org

# top-most EditorConfig file
root = true

# All files
[*]
indent_style = space
insert_final_newline = true
trim_trailing_whitespace = true

# Markdown files
[*.md]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
max_line_length = off
trim_trailing_whitespace = false

# Visual Studio solution files
[*.sln]
index_style = tab

# C# project files
[*.csproj]
indent_size = 2

# JSON files
[*.json]
indent_size = 2

# Web files
[*.{html,ts,tsx,css,scss}]
indent_size = 2


#######################################################################################################################
#######################################################################################################################
# All settings below apply to C# code files
#######################################################################################################################
#######################################################################################################################

[*.cs]
indent_size = 4

#######################################################################################################################
# Configure severity of all code quality "enabled by default" rules
# These are rules where the isEnabledByDefault property in the Diagnostic Descriptor ctor is true
# https://docs.microsoft.com/en-us/dotnet/api/microsoft.codeanalysis.diagnosticdescriptor
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-options
#
# Don't use AnalysisMode or AnalysisLevel MSBuild properties to enable additional rules because that uses a NuGet 
# globalconfig file with rule-level settings, which will take precedence over all-level and category-level settings
# in this file. Instead enable disabled by default rules by adding rule-level config to this file.
# https://docs.microsoft.com/en-us/dotnet/core/project-sdk/msbuild-props#analysismode
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files#global-analyzerconfig
# https://github.com/dotnet/roslyn-analyzers/issues/5077#issuecomment-829854616
# https://github.com/dotnet/roslyn/issues/47046
#
# Net Analyzer code quality rules enabled by default (all rules where severity is not disabled)
# https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Microsoft.CodeAnalysis.NetAnalyzers.md
# https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md
#
# Sonar Analyzer rules enabled by default (search for "_IsActivatedByDefault")
# https://github.com/SonarSource/sonar-dotnet/blob/master/analyzers/src/SonarAnalyzer.CSharp/RspecStrings.resx
# https://github.com/SonarSource/sonar-dotnet/blob/master/analyzers/src/SonarAnalyzer.Common/DiagnosticAnalyzer/DiagnosticDescriptorBuilder.cs#L54
# https://rules.sonarsource.com/csharp

dotnet_analyzer_diagnostic.severity = error


#######################################################################################################################
# Enable select Net Analyzer code quality rules which are disabled by default
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/
# https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md

## Design category ##
#####################
# Avoid out parameters
dotnet_diagnostic.CA1021.severity = error
# Use properties where appropriate
dotnet_diagnostic.CA1024.severity = error
# Implement IDisposable correctly
dotnet_diagnostic.CA1063.severity = error
# Exceptions should be public
dotnet_diagnostic.CA1064.severity = error
# Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1065.severity = error
# Implement IEquatable when overriding Equals
dotnet_diagnostic.CA1066.severity = error

## Maintainability category ##
##############################
# Avoid excessive inheritance
dotnet_diagnostic.CA1501.severity = error
# Avoid excessive complexity
dotnet_diagnostic.CA1502.severity = error
# Avoid unmaintainable code
dotnet_diagnostic.CA1505.severity = error
# Avoid excessive class coupling
dotnet_diagnostic.CA1506.severity = error
# Avoid dead conditional code
dotnet_diagnostic.CA1508.severity = error
# Invalid entry in code metrics configuration file
dotnet_diagnostic.CA1509.severity = error

## Naming category ##
#####################
# Property names should not match get methods
dotnet_diagnostic.CA1721.severity = error
# Type names should not match namespaces
dotnet_diagnostic.CA1724.severity = error

## 	Performance category ##
###########################
# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = error
# Properties should not return arrays
dotnet_diagnostic.CA1819.severity = error
# Test for empty strings using string length
dotnet_diagnostic.CA1820.severity = error
# Override equals and operator equals on value types
dotnet_diagnostic.CA1815.severity = error

## Reliability category ##
##########################
# Dispose objects before losing scope
dotnet_diagnostic.CA2000.severity = error
# Do not lock on objects with weak identity
dotnet_diagnostic.CA2002.severity = error

## Security category ##
#######################
# Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2100.severity = error
# Do Not Use Unsafe Cipher Modes
dotnet_diagnostic.CA5358.severity = error
# Use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5382.severity = error
# Ensure use secure cookies in ASP.NET Core
dotnet_diagnostic.CA5383.severity = error
# Do not hard-code encryption key
dotnet_diagnostic.CA5390.severity = error
# Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5391.severity = error
# Do not use insecure randomness
dotnet_diagnostic.CA5394.severity = error
# Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5396.severity = error

## Usage category ##
####################
# Disposable fields should be disposed
dotnet_diagnostic.CA2213.severity = error
# Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2217.severity = error
# Operator overloads have named alternates
dotnet_diagnostic.CA2225.severity = error
# Operators should have symmetrical overloads
dotnet_diagnostic.CA2226.severity = error
# Collection properties should be read only
dotnet_diagnostic.CA2227.severity = error


#######################################################################################################################
# Disable select Net Analyzer code quality rules which are enabled by default

# The behavior of 'string.Contains(string)' could vary based on the current user's locale settings.
# Justification: Not necessary for this project
dotnet_diagnostic.CA1307.severity = none
# Specify CultureInfo
# Justification: Not necessary for this project
dotnet_diagnostic.CA1304.severity = none
# Forward the CancellationToken parameter to methods that take one
# Justification: TODO: remove once violations are fixed
dotnet_diagnostic.CA2016.severity = warning
# Mark members as static
# Justification: Personal preference not to use this
dotnet_diagnostic.CA1822.severity = none


#######################################################################################################################
# Configure Net Analyzer code quality rules
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-quality-rule-options#options
# https://github.com/dotnet/roslyn-analyzers/blob/main/docs/Analyzer%20Configuration.md

# Analyze public, internal, and private APIs (default is public)
dotnet_code_quality.api_surface = public,internal,private


#######################################################################################################################
# Enable select Web API Analyzer code quality rules which are disabled by default
# https://docs.microsoft.com/en-us/aspnet/core/web-api/advanced/analyzers
# https://github.com/dotnet/aspnetcore/blob/main/src/Mvc/Mvc.Api.Analyzers/src/ApiDiagnosticDescriptors.cs

 # TODO: change to error once violations are fixed
dotnet_diagnostic.API1002.severity = warning


#######################################################################################################################
# Enable select Sonar Analyzer code quality rules which are disabled by default

## Minor code smell category ##
###############################
# Files should contain an empty newline at the end
dotnet_diagnostic.S113.severity = error
# String literals should not be duplicated
dotnet_diagnostic.S1192.severity = error
# "switch" statements should have at least 3 "case" clauses
dotnet_diagnostic.S1301.severity = error
# Multiple variables should not be declared on the same line
dotnet_diagnostic.S1659.severity = error
# "ToString()" calls should not be redundant
dotnet_diagnostic.S1858.severity = error
# Track use of "NotImplementedException"
dotnet_diagnostic.S3717.severity = warning

## Major code smell category ##
###############################
# Magic numbers should not be used
#dotnet_diagnostic.S109.severity = error # disabled because attributes with multiple values can't be excluded
# Functions should not have too many lines of code
dotnet_diagnostic.S138.severity = error

## Critical code smell category ##
##################################
# "nameof" should be used
dotnet_diagnostic.S2302.severity = error

## Blocker code smell category ##
#################################
# Calls to "async" methods should not be blocking
dotnet_diagnostic.S4462.severity = warning


#######################################################################################################################
# Disable select Sonar Analyzer code quality rules which are enabled by default

# "Iserializable" should be implemented correctly
# Justification: Not necessary for this project
dotnet_diagnostic.S3925.severity = none
# Sections of code should not be commented out
# Justification: Treat as warning instead of error
dotnet_diagnostic.S125.severity = warning
# Track uses of "TODO" tags
# Justification: Treat as warning instead of error
dotnet_diagnostic.S1135.severity = warning
# URIs should not be hardcoded
# Justification: Not important for this project
dotnet_diagnostic.S1075.severity = none


#######################################################################################################################
# Disable duplicate rules to improve performance

## Net Analyzer rules ##
########################
# Avoid unused private fields
dotnet_diagnostic.CA1823.severity = none # IDE0051

## Sonar Analyzer rules ##
##########################
# Unused private types or members should be removed
dotnet_diagnostic.S1144.severity = none # IDE0051


#######################################################################################################################
# Configure severity of all code style rules. All code style rules are "enabled by default" but their severity is not
# changed by `dotnet_analyzer_diagnostic.severity = error`
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/categories
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
dotnet_analyzer_diagnostic.category-CodeQuality.severity = error
dotnet_analyzer_diagnostic.category-Style.severity = error


#######################################################################################################################
# Reduce severity of select code style rules

# Add missing cases to switch statement
dotnet_diagnostic.IDE0010.severity = suggestion
# Add missing cases to switch expression
dotnet_diagnostic.IDE0072.severity = suggestion
# Expression value is never used
dotnet_diagnostic.IDE0058.severity = suggestion


#######################################################################################################################
# Configure code style rules
# All settings must be specified so that settings from this file are used instead of settings configured in the user's
# Visual Studio options
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules
# https://github.com/dotnet/roslyn/blob/main/src/VisualStudio/Core/Def/CodeCleanup/readme.md
# Rule documentation issues https://github.com/dotnet/docs/issues?q=%226d91b560-c12f-6e6d-e92b-1babb27edb67%22

## Undocumented experimental rules (as of 6/6/22) ##
####################################################
# see https://github.com/dotnet/docs/issues/23473
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true
csharp_style_allow_embedded_statements_on_same_line_experimental = true
dotnet_style_allow_multiple_blank_lines_experimental = true
dotnet_style_allow_statement_immediately_after_block_experimental = true

## Language rules ##
####################
# 'this.' and 'Me.' qualifiers
dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false
# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true
dotnet_style_predefined_type_for_member_access = true
# Modifier preferences
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async
dotnet_style_require_accessibility_modifiers = for_non_interface_members
dotnet_style_readonly_field = true
csharp_prefer_static_local_function = true
# Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary
# Expression-level preferences
dotnet_style_object_initializer = true
csharp_style_inlined_variable_declaration = rue
dotnet_style_collection_initializer = true
dotnet_style_operator_placement_when_wrapping = beginning_of_line # undocumented as of 6/6/22
dotnet_style_prefer_auto_properties = true
dotnet_style_explicit_tuple_names = true
csharp_prefer_simple_default_expression = true
dotnet_style_prefer_inferred_tuple_names = true
dotnet_style_prefer_inferred_anonymous_type_member_names = true
# csharp_style_pattern_local_over_anonymous_function and csharp_style_prefer_local_over_anonymous_function are the same rule
# See https://github.com/dotnet/docs/issues/28285
csharp_style_pattern_local_over_anonymous_function = true
csharp_style_prefer_local_over_anonymous_function = true
dotnet_style_prefer_conditional_expression_over_assignment = true
csharp_style_deconstructed_variable_declaration = true
dotnet_style_prefer_conditional_expression_over_return = true
dotnet_style_prefer_compound_assignment = true
dotnet_style_prefer_simplified_boolean_expressions = true
dotnet_style_prefer_simplified_interpolation = true
csharp_style_prefer_index_operator = true
csharp_style_prefer_local_over_anonymous_function = true # undocumented as of 6/6/22
csharp_style_prefer_null_check_over_type_check = true # undocumented as of 6/6/22
csharp_style_prefer_range_operator = true
csharp_style_prefer_tuple_swap = true # undocumented as of 6/6/22
csharp_style_implicit_object_creation_when_type_is_apparent = true
# Null-checking preferences
csharp_style_throw_expression = true
dotnet_style_coalesce_expression = true
dotnet_style_null_propagation = true
dotnet_style_prefer_is_null_check_over_reference_equality_method = true
csharp_style_conditional_delegate_call = true
csharp_style_prefer_parameter_null_checking = true # undocumented as of 6/6/22
# 'var' preferences
csharp_style_var_for_built_in_types = true
csharp_style_var_when_type_is_apparent = true
csharp_style_var_elsewhere = true
# Expression-bodied members
csharp_style_expression_bodied_constructors = false
csharp_style_expression_bodied_methods = false
csharp_style_expression_bodied_operators = when_on_single_line 
csharp_style_expression_bodied_properties = when_on_single_line 
csharp_style_expression_bodied_indexers = when_on_single_line 
csharp_style_expression_bodied_accessors = when_on_single_line 
csharp_style_expression_bodied_lambdas = true
csharp_style_expression_bodied_local_functions = false
# Pattern matching preferences
csharp_style_pattern_matching_over_as_with_null_check = true
csharp_style_pattern_matching_over_is_with_cast_check = true
csharp_style_prefer_extended_property_pattern = true # undocumented as of 6/6/22
csharp_style_prefer_switch_expression = true
csharp_style_prefer_pattern_matching = true
csharp_style_prefer_not_pattern = true
# Code block preferences
csharp_prefer_braces = true
csharp_prefer_simple_using_statement = true
csharp_style_prefer_method_group_conversion = true # undocumented as of 6/6/22
# 'using' directive preferences
csharp_using_directive_placement = outside_namespace
# File header preferences
file_header_template = unset

## Unnecessary code rules ##
############################
csharp_style_unused_value_expression_statement_preference = discard_variable
csharp_style_unused_value_assignment_preference = discard_variable
dotnet_code_quality_unused_parameters = all
dotnet_remove_unnecessary_suppression_exclusions = none

## Formatting rules ##
######################
# Organize usings
dotnet_sort_system_directives_first = true
dotnet_separate_import_directive_groups = false
# Namespace options
dotnet_style_namespace_match_folder = true
# Newline options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
# Indentation options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = true
# Spacing options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
# Wrap options
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true
# Using directive options
csharp_using_directive_placement = outside_namespace
# Namespace options
csharp_style_namespace_declarations = block_scoped

## Naming rules ##
##################
# Naming rules are from https://github.com/RehanSaeed/EditorConfig/blob/main/.editorconfig
# All content is copied as-is except:
# 1. rule severity has been increased to error for all rules
# 2. camel_case_prefix_underscore_style added and used by stylecop_private_fields_must_be_camel_case_rule


# !!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!! BEGIN RehanSaeed !!!!!
#
##########################################
# License
##########################################
# The following applies as to the .editorconfig file ONLY, and is
# included below for reference, per the requirements of the license
# corresponding to this .editorconfig file.
# See: https://github.com/RehanSaeed/EditorConfig
#
# MIT License
#
# Copyright (c) 2017-2019 Muhammad Rehan Saeed
# Copyright (c) 2019 Henry Gabryjelski
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
##########################################

##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
dotnet_naming_style.camel_case_style.capitalization = camel_case
# camel_case_prefix_underscore_style - camelCase style with underscore prefix
dotnet_naming_style.camel_case_prefix_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_prefix_underscore_style.required_prefix = _
# pascal_case_style - Define the PascalCase style
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
# first_upper_style - The first character must start with an upper-case character
dotnet_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
dotnet_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
dotnet_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
dotnet_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
dotnet_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
dotnet_naming_style.disallowed_style.capitalization  = pascal_case
dotnet_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
dotnet_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
dotnet_naming_style.internal_error_style.capitalization  = pascal_case
dotnet_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
dotnet_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____

##########################################
# .NET Design Guideline Field Naming Rules
# Naming rules for fields follow the .NET Framework design guidelines
# https://docs.microsoft.com/dotnet/standard/design-guidelines/index
##########################################

# All public/protected/protected_internal constant fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = error

# All public/protected/protected_internal static readonly fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = error

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, protected_internal
dotnet_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
dotnet_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
dotnet_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = error

# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected, private
dotnet_naming_symbols.stylecop_static_readonly_fields_group.required_modifiers         = static, readonly
dotnet_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
dotnet_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = error

# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, internal, protected_internal, protected, private_protected
dotnet_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
dotnet_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
dotnet_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private
dotnet_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = camel_case_prefix_underscore_style
dotnet_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = error

# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
dotnet_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
dotnet_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
dotnet_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = error

# This rule should never fire.  However, it's included for at least two purposes:
# First, it helps to understand, reason about, and root-case certain types of issues, such as bugs in .editorconfig parsers.
# Second, it helps to raise immediate awareness if a new field type is added (as occurred recently in C#).
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_accessibilities = *
dotnet_naming_symbols.sanity_check_uncovered_field_case_group.applicable_kinds           = field
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.symbols  = sanity_check_uncovered_field_case_group
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.style    = internal_error_style
dotnet_naming_rule.sanity_check_uncovered_field_case_rule.severity = error

##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
# - Namespaces
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
dotnet_naming_symbols.element_group.applicable_kinds = namespace, class, enum, struct, delegate, event, method, property
dotnet_naming_rule.element_rule.symbols              = element_group
dotnet_naming_rule.element_rule.style                = pascal_case_style
dotnet_naming_rule.element_rule.severity             = error

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.interface_group.applicable_kinds = interface
dotnet_naming_rule.interface_rule.symbols              = interface_group
dotnet_naming_rule.interface_rule.style                = prefix_interface_with_i_style
dotnet_naming_rule.interface_rule.severity             = error

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
dotnet_naming_rule.type_parameter_rule.symbols              = type_parameter_group
dotnet_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
dotnet_naming_rule.type_parameter_rule.severity             = error

# Function parameters use camelCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
dotnet_naming_symbols.parameters_group.applicable_kinds = parameter
dotnet_naming_rule.parameters_rule.symbols              = parameters_group
dotnet_naming_rule.parameters_rule.style                = camel_case_style
dotnet_naming_rule.parameters_rule.severity             = error

# !!!!! END RehanSaeed !!!!! #
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!


#######################################################################################################################
# Configure rule severity for special files

## Third-party code
[{ValueObject.cs,Entity.cs,UserStore.cs}]
dotnet_analyzer_diagnostic.severity = suggestion
dotnet_analyzer_diagnostic.category-CodeQuality.severity = suggestion
dotnet_analyzer_diagnostic.category-Style.severity = suggestion
dotnet_diagnostic.CA1063.severity = suggestion

## Startup object
[Program.cs]
# Utility classes should not have public constructors
dotnet_diagnostic.S1118.severity = none
# Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1052.severity = none