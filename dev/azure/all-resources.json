{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.0.1",
    "parameters": {
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location to deploy all resources"
            }
        },
        "appServiceName": {
            "type": "string",
            "defaultValue": "purchase-order-tracker",
            "minLength": 2,
            "metadata": {
                "description": "Included in resource name for: VNet, App Service Plan, App Services, App Gateway"
            }
        },
        "sqlServerName": {
            "type": "string",
            "defaultValue": "[format('purchase-order-tracker-sql-server-{0}', uniqueString(resourceGroup().id))]"
        },
        "sqlServerAdminLogin": {
            "type": "string"

        },
        "sqlServerAdminPassword": {
            "type": "securestring",
            "metadata": {
                "description": "does not contain account name; at least 8 chars; 3 of 4 categories: upper, lower, number, symbol"
            }
        },
        "vmssAdminUsername": {
            "type": "string"
        },
        "vmssAdminPassword": {
            "type": "secureString"
        }
    },
    "functions": [],
    "variables": {
        "vNetName": "[format('vnet-{0}', parameters('appServiceName'))]",
        "vNetSubnetAppGwName": "app-gateway",
        "vNetSubnetAppServicesOutboundDelegatedName": "app-services-outbound-delegated",
        "vNetSubnetInboundName": "inbound",
        "vNetSubnetDevOpsAgentsName": "devops-agents",

        "networkSecGroupBlockOutboundInternetName": "nsg-block-outbound-internet",

        "privateDnsZoneStorageBlobName": "privatelink.blob.core.windows.net",
        "privateDnsZoneKeyVaultName": "privatelink.vaultcore.azure.net",
        "privateDnsZoneWebAppsName": "privatelink.azurewebsites.net",
        "privateDnsZoneSqlServerName": "privatelink.database.windows.net",

        "privateEndpointStorageBlobName": "pl-storageblob",
        "privateEndpointKeyVaultName": "pl-keyvault",
        "privateEndpointAppServiceWebUiAngularName": "pl-webui-angular",
        "privateEndpointAppServiceWebUiAdminName": "pl-webui-admin",
        "privateEndpointappServiceWebApiName": "pl-webapi",
        "privateEndpointappServiceIdentityName": "pl-identity",
        "privateEndpointSqlServerName": "pl-sql-server",

        "keyVaultName": "[format('kv-{0}', uniqueString(guid(resourceGroup().id)))]",
        "dataProtectionKeyName": "aspnet-dp",

        "storageAccountName": "[format('st{0}', uniqueString(parameters('appServiceName')))]",
        "storageAccountContainerName": "aspnet-dataprotection",
        "storageAccountContainerBlobDataProtectionName": "keyRing",

        "appServicePlanName": "[format('asp-{0}', parameters('appServiceName'))]",
        "appServiceIdentityName": "[format('{0}-identity-{1}', parameters('appServiceName'), uniqueString(resourceGroup().id))]",
        "appServiceWebUiAngularName": "[format('{0}-webui-angular-{1}', parameters('appServiceName'), uniqueString(resourceGroup().id))]",
        "appServiceWebUiAdminName": "[format('{0}-webui-admin-{1}', parameters('appServiceName'), uniqueString(resourceGroup().id))]",
        "appServiceWebApiName": "[format('{0}-webapi-{1}', parameters('appServiceName'), uniqueString(resourceGroup().id))]",
        "appServiceHealthCheckPath": "/health",

        "appGatewayName": "[format('apgw-{0}', parameters('appServiceName'))]",
        "appGatewayListenerName": "http-80",
        "appGatewayPublicIpName": "agpw-public-ip",
        "appGatewayBackendSettingsName": "http-80-no-affinity",
        "appGatewayHealthProbeName": "http-healthcheck",

        "sqlServerIdentityDbName": "PurchaseOrderTrackerIdentity_Angular",
        "sqlServerAngularDbName": "PurchaseOrderTracker_Angular",

		"vmScaleSetName": "vmss-devops-agent",
		"vmName": "vmss-devops-agent",

        "rbacRoleMapping": {
            "comment": "https://docs.microsoft.com/en-us/azure/role-based-access-control/built-in-roles",
            "Key Vault Crypto User": "12338af0-0e69-4776-bea7-57ae8d297424",
            "Storage Blob Data Contributor": "ba92f5b4-2d11-453d-a403-e96b0029c9fe",


            "Key Vault Crypto Officer": "14b46e9e-c2b7-41b4-b07b-48a6ebf60603",
            "Key Vault Administrator": "00482a5a-887f-4fb3-b363-3b7fe8e74483",
            "Key Vault Certificates Officer": "a4417e6f-fecd-4de8-b567-7b0420556985",
            "Key Vault Crypto Service Encryption User": "e147488a-f6f5-4113-8e2d-b22465e65bf6",
            "Key Vault Reader": "21090545-7ca7-4776-b22c-e363652d74d2",
            "Key Vault Secrets Officer": "b86a8fe4-44ce-4948-aee5-eccb2c155cd7",
            "Key Vault Secrets User": "4633458b-17de-408a-b874-0445c86b69e6"
        }
    },
    "resources": [
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "2021-08-01",
            "name": "[variables('vNetName')]",
            "location": "[parameters('location')]",
            "dependsOn": [ "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecGroupBlockOutboundInternetName'))]" ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "10.0.0.0/16"
                    ]
                },
                "subnets": [
                    {
                        "name": "[variables('vNetSubnetInboundName')]",
                        "properties": {
                            "addressPrefix": "10.0.1.0/24"
                        }
                    },
                    {
                        "name": "[variables('vNetSubnetAppServicesOutboundDelegatedName')]",
                        "properties": {
                            "addressPrefix": "10.0.2.0/24",
                            "networkSecurityGroup": {
                                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecGroupBlockOutboundInternetName'))]"
                            },
                            "delegations": [
                                {
                                    "name": "Microsoft.Web.serverFarms",
                                    "properties": {
                                        "serviceName": "Microsoft.Web/serverFarms"
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "name": "[variables('vNetSubnetAppGwName')]",
                        "properties": {
                            "addressPrefix": "10.0.3.0/26"
                        }
                    },
                    {
                        "name": "[variables('vNetSubnetDevOpsAgentsName')]",
                        "properties": {
                            "addressPrefix": "10.0.4.0/24"
                        }
                    }
                ],
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "2021-08-01",
            "name": "[variables('networkSecGroupBlockOutboundInternetName')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "Deny_Outbound_Internet",
                        "properties": {
                            "protocol": "*",
                            "sourcePortRange": "*",
                            "destinationPortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "Internet",
                            "access": "Allow",
                            "priority": 110,
                            "direction": "Outbound"
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "securityRules",
                    "apiVersion": "2021-08-01",
                    "name": "Deny_Outbound_Internet",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecGroupBlockOutboundInternetName'))]"
                    ],
                    "properties": {
                        "protocol": "*",
                        "sourcePortRange": "*",
                        "destinationPortRange": "*",
                        "sourceAddressPrefix": "*",
                        "destinationAddressPrefix": "Internet",
                        "access": "Allow",
                        "priority": 110,
                        "direction": "Outbound"
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateDnsZoneStorageBlobName')]",
            "location": "global",
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat(variables('privateDnsZoneStorageBlobName'), '-vlink')]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneStorageBlobName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    ],
                    "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointStorageBlobName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"

                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointStorageBlobName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointStorageBlobName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                            "groupIds": [ "blob" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointStorageBlobName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneStorageBlobName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneStorageBlobName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateDnsZoneKeyVaultName')]",
            "location": "global",
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat(variables('privateDnsZoneKeyVaultName'), '-vlink')]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneKeyVaultName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    ],
                    "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointKeyVaultName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"

            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"
                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointKeyVaultName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointKeyVaultName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
                            "groupIds": [ "vault" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointKeyVaultName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneKeyVaultName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneKeyVaultName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateDnsZoneWebAppsName')]",
            "location": "global",
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat(variables('privateDnsZoneWebAppsName'), '-vlink')]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneWebAppsName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    ],
                    "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointAppServiceWebUiAngularName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"

                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointAppServiceWebUiAngularName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointAppServiceWebUiAngularName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName'))]",
                            "groupIds": [ "sites" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointAppServiceWebUiAngularName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneWebAppsName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneWebAppsName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointAppServiceWebUiAdminName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"

                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointAppServiceWebUiAdminName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointAppServiceWebUiAdminName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName'))]",
                            "groupIds": [ "sites" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointAppServiceWebUiAdminName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneWebAppsName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneWebAppsName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointappServiceIdentityName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('appServiceIdentityName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"
                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointappServiceIdentityName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointappServiceIdentityName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('appServiceIdentityName'))]",
                            "groupIds": [ "sites" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointappServiceIdentityName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneWebAppsName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneWebAppsName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointappServiceWebApiName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('appServiceWebApiName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"
                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointappServiceWebApiName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointappServiceWebApiName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('appServiceWebApiName'))]",
                            "groupIds": [ "sites" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointappServiceWebApiName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneWebAppsName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneWebAppsName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateDnsZones",
            "apiVersion": "2020-06-01",
            "name": "[variables('privateDnsZoneSqlServerName')]",
            "location": "global",
            "resources": [
                {
                    "type": "virtualNetworkLinks",
                    "apiVersion": "2020-06-01",
                    "name": "[concat(variables('privateDnsZoneSqlServerName'), '-vlink')]",
                    "location": "global",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneSqlServerName'))]",
                        "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                    ],
                    "properties": {
                        "registrationEnabled": false,
                        "virtualNetwork": {
                            "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
                        }
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Network/privateEndpoints",
            "apiVersion": "2021-05-01",
            "name": "[variables('privateEndpointSqlServerName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "subnet": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetInboundName'))]"
                },
                "customNetworkInterfaceName": "[concat(variables('privateEndpointSqlServerName'), '-nic')]",
                "privateLinkServiceConnections": [
                    {
                        "name": "[concat(variables('privateEndpointSqlServerName'), '-link')]",
                        "properties": {
                            "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]",
                            "groupIds": [ "sqlServer" ]
                        }
                    }
                ]
            },
            "resources": [
                {
                    "type": "privateDnsZoneGroups",
                    "apiVersion": "2020-11-01",
                    "name": "dnsgroupname",
                    "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpointSqlServerName'))]"
                    ],
                    "properties": {
                        "privateDnsZoneConfigs": [
                            {
                                "name": "[concat(variables('privateDnsZoneSqlServerName'), '-dns-zgroup')]",
                                "properties": {
                                    "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('privateDnsZoneSqlServerName'))]"
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-09-01",
            "name": "[variables('storageAccountName')]",
            "location": "[parameters('location')]",
            "properties": {
                "accessTier": "Hot",
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "publicNetworkAccess": "Disabled",
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true,
                "allowCrossTenantReplication": true,
                "defaultToOAuthAuthentication": true,
                "networkAcls": {
                    "bypass": "AzureServices",
                    "defaultAction": "Deny"
                },
                "dnsEndpointType": "Standard",
                "encryption": {
                    "keySource": "Microsoft.Storage",
                    "services": {
                        "blob": {
                            "enabled": true
                        },
                        "file": {
                            "enabled": true
                        },
                        "table": {
                            "enabled": true
                        },
                        "queue": {
                            "enabled": true
                        }
                    },
                    "requireInfrastructureEncryption": false
                }
            },
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "StorageV2",
			"resources": [
				{
					"type": "blobServices",
					"apiVersion": "2021-09-01",
					"name": "default",
					"properties": {
						"restorePolicy": {
							"enabled": false
						},
						"deleteRetentionPolicy": {
							"enabled": false
						},
						"containerDeleteRetentionPolicy": {
							"enabled": false
						},
						"changeFeed": {
							"enabled": false
						},
						"isVersioningEnabled": false
					},
					"dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
					],
                    "resources": [
                        {
                            "type": "containers",
                            "apiVersion": "2021-09-01",
                            "name": "[variables('storageAccountContainerName')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]"
                            ]
                        }
                    ]
                }
			]
        },
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2022-07-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "properties": {
                "tenantId": "[subscription().tenantId]",
                "publicNetworkAccess": "Disabled",
                "enabledForDeployment": false,
                "enabledForTemplateDeployment": false,
                "enabledForDiskEncryption": false,
                "enableRbacAuthorization": true,
                "enableSoftDelete": true,
                "softDeleteRetentionInDays": 7,
                "sku": {
                    "name": "Standard",
                    "family": "A"
                },
                "networkAcls": {
                    "defaultAction": "deny",
                    "bypass": "AzureServices"
                }
            },
            "resources": [
                {
                    "type": "keys",
                    "apiVersion": "2022-07-01",
                    "name": "[variables('dataProtectionKeyName')]",
                    "properties": {
                        "attributes": {
                            "enabled": true
                        },
                        "keySize": "4096",
                        "kty": "RSA"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Network/applicationGateways",
            "apiVersion": "2021-08-01",
            "name": "[variables('appGatewayName')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGatewayPublicIpName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vNetName'))]"
            ],
            "properties": {
                "sku": {
                    "name": "Standard_v2",
                    "tier": "Standard_v2",
                    "capacity": "1"
                },
                "gatewayIPConfigurations": [
                    {
                        "name": "appGatewayIpConfig",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetAppGwName'))]"
                            }
                        }
                    }
                ],
                "frontendIPConfigurations": [
                    {
                        "name": "appGwPublicFrontendIp",
                        "properties": {
                            "PublicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('appGatewayPublicIpName'))]"
                            }
                        }
                    }
                ],
                "frontendPorts": [
                    {
                        "name": "port_80",
                        "properties": {
                            "Port": 80
                        }
                    }
                ],
                "backendAddressPools": [
                    {
                        "name": "webui-angular-pool",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName'))).hostNames[0]]"
                                }

                            ]
                        }
                    },
                    {
                        "name": "webui-admin-pool",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName'))).hostNames[0]]"
                                }
                            ]
                        }
                    },
                    {
                        "name": "identity-pool",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceIdentityName'))).hostNames[0]]"
                                }
                            ]
                        }
                    },
                    {
                        "name": "webapi-pool",
                        "properties": {
                            "backendAddresses": [
                                {
                                    "fqdn": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebApiName'))).hostNames[0]]"
                                }
                            ]
                        }
                    }
                ],
                "backendHttpSettingsCollection": [
                    {
                        "name": "[variables('appGatewayBackendSettingsName')]",
                        "properties": {
                            "Port": 80,
                            "Protocol": "Http",
                            "cookieBasedAffinity": "Disabled",
                            "pickHostNameFromBackendAddress": true,
                            "requestTimeout": 20,
                            "path": "/",
                            "probe": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/probes', variables('appGatewayName'), variables('appGatewayHealthProbeName'))]"
                            }
                        }
                    }
                ],
                "httpListeners": [
                    {
                        "name": "[variables('appGatewayListenerName')]",
                        "properties": {
                            "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendIPConfigurations', variables('appGatewayName'), 'appGwPublicFrontendIp')]"
                            },
                            "frontendPort": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/frontendPorts', variables('appGatewayName'), 'port_80')]"
                            },
                            "protocol": "Http"
                        }
                    }
                ],
                "requestRoutingRules": [
                    {
                        "name": "path-based-routing",
                        "properties": {
                            "ruleType": "PathBasedRouting",
                            "httpListener": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/httpListeners', variables('appGatewayName'), variables('appGatewayListenerName'))]"
                            },
                            "urlPathMap": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/urlPathMaps', variables('appGatewayName'), 'path-based-routing')]"
                            },
                            "priority": 100
                        }
                    }
                ],
                "enableHttp2": false,
                "urlPathMaps": [
                    {
                        "name": "path-based-routing",
                        "properties": {
                            "pathRules": [
                                {
                                    "name": "webui-angular",
                                    "properties": {
                                        "paths": [
                                            "/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), 'webui-angular-pool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackendSettingsName'))]"
                                        }
                                    }
                                },
                                {
                                    "name": "webui-admin",
                                    "properties": {
                                        "paths": [
                                            "/admin/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), 'webui-admin-pool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackendSettingsName'))]"
                                        }
                                    }
                                },
                                {
                                    "name": "identity",
                                    "properties": {
                                        "paths": [
                                            "/identity/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), 'identity-pool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackendSettingsName'))]"
                                        }
                                    }
                                },
                                {
                                    "name": "webapi",
                                    "properties": {
                                        "paths": [
                                            "/api/*"
                                        ],
                                        "backendAddressPool": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), 'webapi-pool')]"
                                        },
                                        "backendHttpSettings": {
                                            "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackendSettingsName'))]"
                                        }
                                    }
                                }
                            ],
                            "defaultBackendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendAddressPools', variables('appGatewayName'), 'webui-angular-pool')]"
                            },
                            "defaultBackendHttpSettings": {
                                "id": "[resourceId('Microsoft.Network/applicationGateways/backendHttpSettingsCollection', variables('appGatewayName'), variables('appGatewayBackendSettingsName'))]"
                            }
                        }
                    }
                ],
                "probes": [
                    {
                        "name": "[variables('appGatewayHealthProbeName')]",
                        "properties": {
                            "protocol": "Http",
                            "host": "127.0.0.1",
                            "path": "[variables('appServiceHealthCheckPath')]",
                            "interval": 30,
                            "timeout": 30,
                            "unhealthyThreshold": 2
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "2021-08-01",
            "name": "[variables('appGatewayPublicIpName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
            "properties": {
                "publicIPAllocationMethod": "Static",
                "idleTimeoutInMinutes": "4",
                "publicIpAddressVersion": "IPv4",
                "dnsSettings": {
                    "domainNameLabel": "[variables('appGatewayName')]"
                }
            }
        },
        {
            "type": "Microsoft.Sql/servers",
            "apiVersion": "2021-11-01-preview",
            "name": "[parameters('sqlServerName')]",
            "location": "[parameters('location')]",
            "properties": {
                "administratorLogin": "[parameters('sqlServerAdminLogin')]",
                "administratorLoginPassword": "[parameters('sqlServerAdminPassword')]",
                "version": "12.0",
                "publicNetworkAccess": "Enabled",
                "comments": "only enable publicNetworkAccess for testing purposes"
            },
            "resources": [
                {
                    "type": "firewallRules",
                    "apiVersion": "2021-11-01-preview",
                    "name": "AllowAllWindowsAzureIps",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                    ],
                    "properties": {
                        "startIpAddress": "0.0.0.0",
                        "endIpAddress": "0.0.0.0"
                    },
                    "comments": "only allow for testing purposes"
                },
                {
                    "type": "databases",
                    "apiVersion": "2021-11-01-preview",
                    "name": "[variables('sqlServerAngularDbName')]",
                    "location": "[parameters('location')]",
                    "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                    ]
                },
                {
                    "type": "databases",
                    "apiVersion": "2021-11-01-preview",
                    "name": "[variables('sqlServerIdentityDbName')]",
                    "location": "[parameters('location')]",
                    "sku": {
                        "name": "Standard",
                        "tier": "Standard"
                    },
                    "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2021-03-01",
            "name": "[variables('appServicePlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "B1"
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('appServiceWebUiAngularName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetAppServicesOutboundDelegatedName'))]",
                "siteConfig": {
                    "ftpsState": "Disabled",
                    "healthCheckPath": "[variables('appServiceHealthCheckPath')]",
                    "netFrameworkVersion": "v6.0",
                    "vnetRouteAllEnabled": true,
                    "alwaysOn": true,
                    "appSettings": [
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },
                        {
                            "name": "ASPNETCORE_ENVIRONMENT",
                            "value": "TestAzure"
                        },
                        {
                            "name": "WebApi.Url",
                            "value": "[concat('http://', reference(resourceId('Microsoft.Web/sites', variables('appServiceWebApiName'))).hostNames[0])]"
                        },
                        {
                            "name": "DataProtection:StorageBlobUri",
                            "value": "[concat(reference(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))).primaryEndpoints.blob, variables('storageAccountContainerName'), variables('storageAccountContainerBlobDataProtectionName'))]"
                        },
                        {
                            "name": "DataProtection:KeyIdentifier",
                            "value": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', variables('keyVaultName'), variables('dataProtectionKeyName'))).keyUri]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('appServiceWebUiAdminName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetAppServicesOutboundDelegatedName'))]",
                "siteConfig": {
                    "ftpsState": "Disabled",
                    "healthCheckPath": "[variables('appServiceHealthCheckPath')]",
                    "netFrameworkVersion": "v6.0",
                    "vnetRouteAllEnabled": true,
                    "alwaysOn": true,
                    "appSettings": [
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },
                        {
                            "name": "ASPNETCORE_ENVIRONMENT",
                            "value": "TestAzure"
                        },
                        {
                            "name": "WebApi.Url",
                            "value": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebApiName'))).hostNames[0]]"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('appServiceWebApiName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetAppServicesOutboundDelegatedName'))]",
                "siteConfig": {
                    "ftpsState": "Disabled",
                    "healthCheckPath": "[variables('appServiceHealthCheckPath')]",
                    "netFrameworkVersion": "v6.0",
                    "vnetRouteAllEnabled": true,
                    "alwaysOn": true,
                    "appSettings": [
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },
                        {
                            "name": "ASPNETCORE_ENVIRONMENT",
                            "value": "TestAzure"
                        }
                    ]
                }
            }
        },
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "2021-03-01",
            "name": "[variables('appServiceIdentityName')]",
            "location": "[parameters('location')]",
            "kind": "app",
            "identity": {
                "type": "SystemAssigned"
            },
            "tags": {
                "[concat('hidden-related:', resourceGroup().id, '/providers/Microsoft.Web/serverfarms/', variables('appServicePlanName'))]": "Resource"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "[resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))]",
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
                "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetAppServicesOutboundDelegatedName'))]",
                "siteConfig": {
                    "connectionStrings": [
                        {
                            "name": "IdentityDatabase",
                            "connectionString": "[concat('Data Source=tcp:', reference(resourceId('Microsoft.Sql/servers', parameters('sqlServerName'))).fullyQualifiedDomainName, ',1433;Database=', variables('sqlServerIdentityDbName'), ';User Id=', parameters('sqlServerAdminLogin'), '@', parameters('sqlServerName'), ';Password=', parameters('sqlServerAdminPassword'), ';')]",
                            "type": "SQLServer"
                        }
                    ],
                    "ftpsState": "Disabled",
                    "healthCheckPath": "[variables('appServiceHealthCheckPath')]",
                    "netFrameworkVersion": "v6.0",
                    "vnetRouteAllEnabled": true,
                    "alwaysOn": true,
                    "appSettings": [
                        {
                            "name": "WEBSITE_RUN_FROM_PACKAGE",
                            "value": "1"
                        },
                        {
                            "name": "ASPNETCORE_ENVIRONMENT",
                            "value": "TestAzure"
                        }
                    ]
                }
            }
        },

        {
            "type": "Microsoft.Compute/virtualMachineScaleSets",
            "name": "[variables('vmScaleSetName')]",
            "apiVersion": "2021-07-01",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            ],
            "properties": {
                "singlePlacementGroup": "false",	
                "virtualMachineProfile": {
                    "storageProfile": {
                        "osDisk": {
                            "createOption": "fromImage",
                            "caching": "ReadWrite",
                            "managedDisk": {
                                "storageAccountType": "StandardSSD_LRS"
                            }
                        },
                        "imageReference": {
                            "publisher": "MicrosoftWindowsServer",
                            "offer": "WindowsServer",
                            "sku": "2022-datacenter-azure-edition",
                            "version": "latest"
                        }
                    },
                    "networkProfile": {
                        "networkInterfaceConfigurations": [
                            {
								"name": "[format('{0}-nic01', variables('vmName'))]",
								"properties": {
									"primary": true,
									"ipConfigurations": [
										{
											"name": "[format('{0}-ipconfig', variables('vmName'))]",
											"properties": {
												"subnet": {
                                                    "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('vNetSubnetDevOpsAgentsName'))]"
												},
												"primary": true
											}
										}
									]
                                }
                            }
                        ]
                    },
                    "osProfile": {
                        "computerNamePrefix": "azdevops",
                        "adminUsername": "[parameters('vmssAdminUsername')]",
                        "adminPassword": "[parameters('vmssAdminPassword')]",
                        "windowsConfiguration": {
                            "provisionVmAgent": true
                        }
                    }
                },
                "orchestrationMode": "Uniform",
                "scaleInPolicy": {
					"rules": [
						"Default"
					]
				},
                "overprovision": "false",
                "upgradePolicy": {
                    "mode": "Manual"
                },
                "platformFaultDomainCount": "1"
            },
            "sku": {
                "name": "Standard_B2s",
                "capacity": 2
            }
        },

        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName')), variables('rbacRoleMapping')['Key Vault Crypto User'])]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Key Vault Crypto User'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName')), variables('rbacRoleMapping')['Key Vault Crypto User'])]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Key Vault Crypto User'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebApiName')), variables('rbacRoleMapping')['Key Vault Crypto User'])]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Key Vault Crypto User'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebApiName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceIdentityName')), variables('rbacRoleMapping')['Key Vault Crypto User'])]",
            "scope": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Key Vault Crypto User'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceIdentityName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName')), variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAngularName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName')), variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebUiAdminName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceWebApiName')), variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceWebApiName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        },
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "2022-04-01",
            "name": "[guid(resourceGroup().id, resourceId('Microsoft.Web/sites', variables('appServiceIdentityName')), variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
            "scope": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
            ],
            "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('rbacRoleMapping')['Storage Blob Data Contributor'])]",
                "principalId": "[reference(resourceId('Microsoft.Web/sites', variables('appServiceIdentityName')), '2021-03-01', 'Full').identity.principalId]",
                "principalType": "ServicePrincipal"
            }
        }
    ],
    "outputs": {
        "appGatewayUrl": {
            "type": "string",
            "value": "[concat('http://', reference(variables('appGatewayPublicIpName')).dnsSettings.fqdn)]"
        }
    }
}