# https://docs.microsoft.com/en-us/azure/devops/pipelines/get-started/key-pipelines-concepts?view=azure-devops
# https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/?view=azure-devops
# https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/yaml-schema/?view=azure-pipelines

variables:
  DotNet.BuildConfiguration: 'Release'
  # use environment variables to override nuget and npm cache directory
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/release/caching?view=azure-devops
  NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
  NPM_CONFIG_CACHE: $(Pipeline.Workspace)/.npm
  
pool:
  name: Azure Pipelines
  vmImage: 'ubuntu-latest'  
  

stages:
- stage: Build
  # split builds into multiple jobs so that they can be executed in parallel. the slowest part of building is
  # installing npm packages. using `npm ci` instead of `npm i` reduces install time by ~75% but depends on
  # package-lock.json which is not cross-platform compatible. See https://github.com/npm/npm/issues/18202
  jobs:
  - job: Build_WebApp_WebUIAngular
    variables:
      WebUI.Angular.Dir: src/PurchaseOrderTracker.WebUI.Angular/ClientApp
    steps:
    - task: Cache@2
      displayName: 'Cache npm packages'
      inputs:
        # create a key using package.json instead of package-lock.json because package-lock is not cross-platform compatible
        # see https://github.com/npm/npm/issues/18202
        key: '"npm" | $(Agent.OS) | $(WebUI.Angular.Dir)/package.json'
        path: $(NPM_CONFIG_CACHE)
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: 16.x
    - task: Npm@1
      displayName: 'npm install (WebUI.Angular)'
      inputs:
        command: install
        workingDir: $(WebUI.Angular.Dir)
    - task: Npm@1
      displayName: 'npm run test:single (WebUI.Angular)'
      inputs:
        command: custom
        workingDir: $(WebUI.Angular.Dir)
        customCommand: 'run test:single'
      enabled: false # TODO: fix broken tests
    - powershell: 'npm run lint:styles --silent -- -f json > stylelint-report.json'
      displayName: 'npm run lint:styles to file (WebUI.Angular)'
      workingDirectory: $(WebUI.Angular.Dir)
    - powershell: 'npm run lint:ts --silent -- --format=json > tslint-report.json'
      displayName: 'npm run lint:ts to file (WebUI.Angular)'
      workingDirectory: $(WebUI.Angular.Dir)
    - task: Npm@1
      displayName: 'npm run build:prod (WebUI.Angular)'
      inputs:
        command: custom
        workingDir: $(WebUI.Angular.Dir)
        verbose: false
        customCommand: 'run build:prod'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [WebUI.Angular]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.WebUI.Angular/ClientApp/dist'
        artifactName: PurchaseOrderTracker.WebUI.Angular-WebApp
  - job: Build_WebApp_WebUIAdmin
    variables:
      WebUI.Admin.Dir: src/PurchaseOrderTracker.WebUI.Admin/ClientApp
    steps:
    - task: Cache@2
      displayName: 'Cache npm packages'
      inputs:
        # create a key using package.json instead of package-lock.json because package-lock is not cross-platform compatible
        # see https://github.com/npm/npm/issues/18202
        key: '"npm" | $(Agent.OS) | $(WebUI.Admin.Dir)/package.json'
        path: $(NPM_CONFIG_CACHE)
    - task: NodeTool@0
      displayName: 'Use Node 16.x'
      inputs:
        versionSpec: 16.x
    - task: Npm@1
      displayName: 'npm install (WebUI.Admin)'
      inputs:
        # using `npm ci` instead of `npm i` reduces install time by ~75% but depends on package-lock.json which
        # is not cross-platform compatible. See https://github.com/npm/npm/issues/18202
        command: install
        workingDir: $(WebUI.Admin.Dir)
    - task: Npm@1
      displayName: 'npm run build (WebUI.Admin)'
      inputs:
        command: custom
        workingDir: $(WebUI.Admin.Dir)
        customCommand: 'run build'
    - task: Npm@1
      displayName: 'npm run test (WebUI.Admin)'
      inputs:
        command: custom
        workingDir: $(WebUI.Admin.Dir)
        customCommand: 'run test'
      enabled: false # TODO: fix broken tests
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [WebUI.Admin]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.WebUI.Admin/ClientApp/build'
        artifactName: PurchaseOrderTracker.WebUI.Admin-WebApp
  - job: Build_DotNet_All
    steps:
    - task: UseDotNet@2
      displayName: 'Use .Net 6'
      inputs:
        version: 6.0.301
    - task: Cache@2
      displayName: 'Cache .Net packages'
      inputs:
        # create a key using .csproj files instead of packages.lock.json because packages.lock.json is not 
        # cross-platform compatible. See https://github.com/NuGet/Home/issues/9195
        key: 'nuget | "$(Agent.OS)" | **/*.csproj,!**/bin/**,!**/obj/**'
        path: $(NUGET_PACKAGES)
    - task: DotNetCoreCLI@2
      displayName: 'Restore .Net global tools'
      inputs:
       command: custom
       custom: tool
       arguments: restore
    - task: DotNetCoreCLI@2
      # even if nuget packages are restored from cache, dont add --no-restore argument because restore 
      # always needs to be excecuted in order to create project.assets.json files
      displayName: 'Build .Net solution'
      inputs:
        arguments: '-c $(DotNet.BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'Execute .Net tests [Domain.Tests]'
      inputs:
        command: custom
        custom: dotcover
        arguments: 'test --no-build -c $(DotNet.BuildConfiguration) --dcReportType=HTML --dcOutput=dotCover.html'
        workingDirectory: test/PurchaseOrderTracker.Domain.Tests
    - task: DotNetCoreCLI@2
      displayName: 'Execute .Net tests [Application.Tests]'
      inputs:
        command: custom
        custom: dotcover
        arguments: 'test --no-build -c $(DotNet.BuildConfiguration) --dcReportType=HTML --dcOutput=dotCover.html'
        workingDirectory: test/PurchaseOrderTracker.Application.Tests
    - task: DotNetCoreCLI@2
      displayName: '.Net Publish [WebUI.Angular]'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/PurchaseOrderTracker.WebUI.Angular.csproj'
        arguments: '--no-build -c $(DotNet.BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    - task: DotNetCoreCLI@2
      displayName: '.Net Publish [WebUI.Admin]'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/PurchaseOrderTracker.WebUI.Admin.csproj'
        arguments: '--no-build -c $(DotNet.BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    - task: DotNetCoreCLI@2
      displayName: '.Net Publish [Identity]'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/PurchaseOrderTracker.Identity.csproj'
        arguments: '--no-build -c $(DotNet.BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: DotNetCoreCLI@2
      displayName: '.Net Publish [WebApi]'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '**/PurchaseOrderTracker.WebApi.csproj'
        arguments: '--no-build -c $(DotNet.BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: True
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [WebUI.Angular]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.WebUI.Angular/bin/$(DotNet.BuildConfiguration)/net6.0'
        artifactName: PurchaseOrderTracker.WebUI.Angular
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [WebUI.Admin]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.WebUI.Admin/bin/$(DotNet.BuildConfiguration)/net6.0'
        artifactName: PurchaseOrderTracker.WebUI.Admin
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [Identity]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.Identity/bin/$(DotNet.BuildConfiguration)/net6.0'
        artifactName: PurchaseOrderTracker.Identity
    - task: PublishPipelineArtifact@1
      displayName: 'Publish Artifact [WebApi]'
      inputs:
        targetPath: 'src/PurchaseOrderTracker.WebApi/bin/$(DotNet.BuildConfiguration)/net6.0'
        artifactName: PurchaseOrderTracker.WebApi